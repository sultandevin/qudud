# -*- coding: utf-8 -*-
"""Quit Smoking Chatbot

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NRZrUniK8JNJrmMNBBzdHWxSy_sPn0-D
"""

from newspaper import Article
import random
import string
import nltk
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import warnings
warnings.filterwarnings('ignore')

nltk.download('punkt', quiet=True)

# function to scrape articles
def scrape_articles():
  from newspaper import Article

  # List of article URLs
  urls = [
    'https://www.webmd.com/smoking-cessation/ss/slideshow-13-best-quit-smoking-tips-ever',
    'https://www.mayoclinic.org/healthy-lifestyle/quit-smoking/in-depth/nicotine-craving/art-20045454', # Corrected the URL to include 'www.mayoclinic',
    # Add more URLs as needed
    'https://www.quit.org.au/'
  ]

  # Initialize an empty string to hold the combined corpus
  corpus = ""

  # Loop through each URL, download, parse, and extract text
  for url in urls:
    try:
        article = Article(url)
        article.download()
        article.parse()
        article.nlp()
        corpus += article.text + "\n\n"  # Append text to corpus with a line break
    except Exception as e:
        print(f"Error fetching {url}: {str(e)}")
        continue

  return corpus if corpus else "Unable to fetch articles. Using default responses."

# print(sentence_list)

# Fungsi untuk return random greetings response
def greeting_response(text):
  text = text.lower()

  #response greeting
  bot_greetings = ['heyyo', 'hi! how can i assist you today?', 'hello', 'hey', 'hola', 'sugeng rawuh']

  user_greetings = ['hey', 'hi', 'hello', 'greetings', 'wassup', 'halo']

  for word in text.split():
    if word in user_greetings:
      return random.choice(bot_greetings)

# Personalized motivation based on user data
def personalized_motivation(user_data):
    craving_level = int(user_data['craving_level'])
    mood = user_data['mood'].lower()
    reason_to_quit = user_data['reason_to_quit']

    messages = []

    if craving_level > 7:
        messages.append("Stay strong! These intense cravings are temporary. Try deep breathing or distracting yourself with another activity.")
    else:
        messages.append("Great! Your cravings seem manageable. Keep up the effort!")

    if mood in ['stressed', 'bored']:
        messages.append("Feeling stressed or bored? Try light exercise, reading a book, or listening to music to distract yourself.")

    messages.append(f"Remember your main reason: '{reason_to_quit}'. Stay focused and believe in yourself to reach your goal!")

    return "\n".join(messages)

# Provide tips for reducing cravings
def craving_tips():
    tips = [
        "Drinking a glass of water can help reduce cravings.",
        "Distract yourself by going for a walk or doing light exercise.",
        "Try meditation or deep breathing for 5 minutes.",
        "Chew sugar-free gum to replace the habit of smoking.",
        "Remember your reason for quitting. It will help you stay focused."
    ]
    return random.choice(tips)

def index_sort(list_var):
  length = len(list_var)
  list_index = list(range(0, length))

  x = list_var
  for i in range(length):
    for j in range(length):
      if x[list_index[i]] > x[list_index[j]]:
        #swap
        temp = list_index[i]
        list_index[i] = list_index[j]
        list_index[j] = temp

  return list_index

def bot_response(user_input, sentence_list, user_data):
  user_input = user_input.lower()
  sentence_list.append(user_input)
  bot_response = ''

  # Check for greetings
  greeting = greeting_response(user_input)
  if greeting:
        return greeting

  # Check for specific keywords
  if "motivation" in user_input:
      return personalized_motivation(user_data)
  elif "craving" in user_input:
      return craving_tips()
  elif "exit" in user_input:
      return "Thank you for using Qudud. Stay strong and believe in yourself!"

  cm = CountVectorizer().fit_transform(sentence_list)
  similarity_scores = cosine_similarity(cm[-1], cm)
  similarity_scores_list = similarity_scores.flatten()
  index = index_sort(similarity_scores_list)
  index = index[1:]
  response_flag = 0

  j = 0
  for i in range(len(index)):
    if similarity_scores_list[index[i]] > 0.0:
      bot_response = bot_response+' '+sentence_list[index[i]]
      response_flag = 1
      j = j+1
      if j > 2:
        break

  if response_flag == 0:
    bot_response = bot_response+' '+"I apologize, I don't understand."

  sentence_list.remove(user_input)

  return bot_response

print('Doc Bot : I am Doctor Bot or Doc Bot. I will answer your queries about quit smoking. If you want to exit, type bye')

exit_list = ['exit', 'see you later', 'bye', 'quit', 'break']

# while(True):
#   user_input = input()
#   if user_input.lower() in exit_list:
#     print('Doc Bot : Chat with you later')
#     break
#   else :
#     if greeting_response(user_input) != None:
#       print('Doc Bot : '+greeting_response(user_input))
#     else:
#       print('Doc Bot : what is that!')

# Main chatbot function
def main():
    print("Welcome to Qudud - Your Quit Smoking Assistant Chatbot!")
    print("Let's get started with some information about you.")

    try:
        user_data = {
            "smoking_frequency": str(max(0, int(input("How many cigarettes do you smoke per day? ")))),
            "craving_level": str(max(1, min(10, int(input("On a scale of 1-10, how strong are your cravings? "))))),
            "mood": input("How do you feel right now? (happy, stressed, bored, etc.) ").strip(),
            "reason_to_quit": input("What is your main reason for wanting to quit smoking? ").strip()
        }
    except ValueError:
        print("Invalid input. Using default values.")
        user_data = {
            "smoking_frequency": "10",
            "craving_level": "5",
            "mood": "neutral",
            "reason_to_quit": "health"
        }

    corpus = scrape_articles()
    sentence_list = nltk.sent_tokenize(corpus)
    
    print("\nType 'motivation' for motivation, 'craving' for tips, or type any message to interact. Type 'exit' to quit.\n")

    while True:
        try:
            user_input = input("You: ").strip()
            if not user_input:
                print("Qudud: Please type something.")
                continue
            response = bot_response(user_input, sentence_list, user_data)
            print("Qudud:", response)
            if "Thank you for using Qudud" in response:
                break
        except Exception as e:
            print(f"Qudud: Sorry, there was an error. Please try again.")
            continue

# Run the chatbot
if __name__ == "__main__":
    main()